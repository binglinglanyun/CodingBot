using CodingBot.Common;
using CodingBot.ToolWindows;
using CodingBot.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CodingBot.Controls
{
    /// <summary>
    /// Interaction logic for ConversationControl.xaml
    /// </summary>
    public partial class ConversationControl : UserControl, INotifyPropertyChanged
    {
        public ConversationControl()
        {
            InitializeComponent();
            this.DataContext = this;
            this.UserDataViewModel.RegisterButtonClickEvent(onUserDataButtonClick);
        }

        #region Private functions
        private void onUserDataButtonClick(object sender, EventArgs e)
        {
            this._userDataControl.Visibility = Visibility.Collapsed;
            this.InputBoxVisibility = Visibility.Visible;
        }

        private void InputBoxEnter_Click(object sender, RoutedEventArgs e)
        {
            ShowUserMessageInConversation();

            //Transfer message to bot, and get message need to show
            this.AutoGeneratedScriptViewModel?.UpdateScript("Hello World");

            //Show Bot Question
            bool question = true;
            if (question)
            {
                ShowBotQuestionInConversation("Hello, Dear User");
            }
            else
            {
                ShowTableInConversation();
            }
        }

        private void ShowUserMessageInConversation()
        {
            TextBlock textBlock = new TextBlock();
            textBlock.Text = this.InputBoxText;
            textBlock.HorizontalAlignment = HorizontalAlignment.Right;
            textBlock.Margin = new Thickness(0, 5, 5, 0);
            this._conversationDisplayRegion.Children.Add(textBlock);
            ScrollToEnd();
        }

        private void ShowBotQuestionInConversation(string message)
        {
            TextBlock textBlock = new TextBlock();
            textBlock.Text = message;
            textBlock.HorizontalAlignment = HorizontalAlignment.Left;
            textBlock.Margin = new Thickness(5, 5, 0, 0);
            this._conversationDisplayRegion.Children.Add(textBlock);
            ScrollToEnd();
        }

        private void ShowTableInConversation()
        {

        }

        private void ScrollToEnd()
        {
            this._converdationScrollViewer.UpdateLayout();
            this._converdationScrollViewer.ScrollToVerticalOffset(_converdationScrollViewer.ScrollableHeight);
        }
        #endregion

        #region Properties
        private UserDataControlViewModel _userDataViewModel = new UserDataControlViewModel();
        public UserDataControlViewModel UserDataViewModel
        {
            get
            {
                return _userDataViewModel;
            }
            set
            {
                _userDataViewModel = value;
                NotifyPropertyChanged("UserDataViewModel");
            }
        }

        private AutoGeneratedScriptControlViewModel _autoGeneratedScriptViewModel;
        public AutoGeneratedScriptControlViewModel AutoGeneratedScriptViewModel
        {
            get
            {
                if (_autoGeneratedScriptViewModel == null)
                {
                    var window = CodingBotClient.Instance.FindToolWindow(typeof(ScriptToolWindow));
                    if (window != null)
                    {
                        var control = window.Content as AutoGeneratedScriptControl;
                        if (control != null)
                        {
                            _autoGeneratedScriptViewModel = control.DataContext as AutoGeneratedScriptControlViewModel;
                        }
                    }
                }

                return _autoGeneratedScriptViewModel;
            }
        }

        private string _inputBoxText = "I want to ...";
        public string InputBoxText
        {
            get
            {
                return _inputBoxText;
            }
            set
            {
                _inputBoxText = value;
                NotifyPropertyChanged("InputBoxText");
            }
        }

        private Visibility _inputBoxVisibility = Visibility.Collapsed;
        public Visibility InputBoxVisibility
        {
            get
            {
                return _inputBoxVisibility;
            }
            set
            {
                _inputBoxVisibility = value;
                NotifyPropertyChanged("InputBoxVisibility");
            }
        }
        #endregion

        #region Notify Prperty Changed
        public event PropertyChangedEventHandler PropertyChanged;
        protected void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #endregion
    }
}
