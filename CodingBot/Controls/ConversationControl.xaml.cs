using CodingBot.Common;
using CodingBot.ToolWindows;
using CodingBot.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CodingBot.Controls
{
    /// <summary>
    /// Interaction logic for ConversationControl.xaml
    /// </summary>
    public partial class ConversationControl : UserControl, INotifyPropertyChanged
    {
        private const double c_maxConversationBoxWidth = 250;
        private List<string> _requestData = new List<string>();
        public ConversationControl()
        {
            InitializeComponent();
            this.DataContext = this;
            this.UserDataViewModel.RegisterButtonClickEvent(onUserDataButtonClick);
        }

        #region Private functions
        private void onUserDataButtonClick(object sender, EventArgs e)
        {
            this._userDataControl.Visibility = Visibility.Collapsed;
            this.InputBoxVisibility = Visibility.Visible;
        }

        private void InputBoxEnter_Click(object sender, RoutedEventArgs e)
        {
            ShowUserMessageInConversation();

            //Here should get data from bot server
            ResponseData responseData = GetFakeResponseData();
            if (responseData != null)
            {
                this.AutoGeneratedScriptViewModel?.UpdateScript(responseData.SciptContent);
                ShowBotMessageInConversation(responseData.BotMessage);
                HandleTableOperation(responseData);
            }
        }

        public void ShowBotMessageInConversation(string message)
        {
            TextBlock textBlock = new TextBlock();
            textBlock.Text = message;
            textBlock.TextWrapping = TextWrapping.Wrap;
            textBlock.HorizontalAlignment = HorizontalAlignment.Left;
            textBlock.MaxWidth = c_maxConversationBoxWidth;
            textBlock.Margin = new Thickness(5, 5, 0, 0);
            this._conversationDisplayRegion.Children.Add(textBlock);
            ScrollToEnd();
        }

        private void ShowUserMessageInConversation()
        {
            TextBlock textBlock = new TextBlock();
            textBlock.Text = this.InputBoxText;
            textBlock.TextWrapping = TextWrapping.Wrap;
            textBlock.MaxWidth = c_maxConversationBoxWidth;
            textBlock.HorizontalAlignment = HorizontalAlignment.Right;
            textBlock.Margin = new Thickness(0, 5, 5, 0);
            this._conversationDisplayRegion.Children.Add(textBlock);
            ScrollToEnd();
        }

        private void SelecteRadioBox(object sender, RoutedEventArgs args)
        {
            RadioButton radioButton = sender as RadioButton;
            if (radioButton != null && radioButton.IsChecked == true)
            {
                List<string> requestData = new List<string>();
                requestData.Add(radioButton.Content.ToString());
                this._requestData = requestData;
            }
        }

        private void OnSelecteRadioBoxClick(object sender, RoutedEventArgs args)
        {
            Button button = sender as Button;
            if (button != null)
            {
                button.IsEnabled = false;
                this.IsRadioBoxEnabled = false;
                
                // Call bot server here
            }
        }

        private void ShowRadioBoxInConversation(List<TableItem> tableItems)
        {
            if (tableItems != null)
            {
                this.IsRadioBoxEnabled = true;
                StackPanel radioBoxPanel = new StackPanel();
                radioBoxPanel.Orientation = Orientation.Vertical;
                radioBoxPanel.HorizontalAlignment = HorizontalAlignment.Left;
                radioBoxPanel.Width = c_maxConversationBoxWidth;
                radioBoxPanel.Margin = new Thickness(10, 5, 5, 0);
                foreach (var tableItem in tableItems)
                {
                    RadioButton radiobutton = new RadioButton();
                    radiobutton.Margin = new Thickness(0, 3, 0, 0);
                    radiobutton.Content = tableItem.TableName;
                    radiobutton.Foreground = this.Foreground;
                    radiobutton.Checked += SelecteRadioBox;
                    Binding isEnableBinding = new Binding("IsRadioBoxEnabled");
                    radioBoxPanel.SetBinding(RadioButton.IsEnabledProperty, isEnableBinding);
                    radioBoxPanel.Children.Add(radiobutton);
                }

                Button button = new Button();
                button.Content = "Select";
                button.Margin = new Thickness(0, 10, 0, 0);
                button.HorizontalAlignment = HorizontalAlignment.Left;
                button.Click += new RoutedEventHandler(OnSelecteRadioBoxClick);
                radioBoxPanel.Children.Add(button);

                this._conversationDisplayRegion.Children.Add(radioBoxPanel);
                ScrollToEnd();
            }
        }

        private void ShowCheckBoxInConversation(List<TableItem> tableItems)
        {
            if (tableItems != null)
            {

            }
        }

        private void ShowMutiCheckBoxInConversation(List<TableItem> tableItems)
        {
            if (tableItems != null)
            {

            }
        }

        private void UpdateUpdateDataStatus(List<TableItem> tableItems)
        {
            if (tableItems != null)
            {

            }
        }

        private void HandleTableOperation(ResponseData responseData)
        {
            switch (responseData.TableOperation)
            {
                case TableOperationType.None:
                    break;
                case TableOperationType.ShowRadioBox:
                    ShowRadioBoxInConversation(responseData.TableItems);
                    break;
                case TableOperationType.ShowCheckBox:
                    ShowCheckBoxInConversation(responseData.TableItems);
                    break;
                case TableOperationType.ShowMultiCheckBox:
                    ShowMutiCheckBoxInConversation(responseData.TableItems);
                    break;
                case TableOperationType.UpdateDataStatus:
                    UpdateUpdateDataStatus(responseData.TableItems);
                    break;
            }
        }

        private ResponseData GetFakeResponseData()
        {
            ResponseData responseData = new ResponseData();
            responseData.BotMessage = @"Hello, Dear User,Hello, Dear User,Hello,Hello, Dear User,Hello, Dear User, Hello, Dear User, Hello, Dear User,Hello, Dear User";

            responseData.TableOperation = TableOperationType.ShowRadioBox;
            List<TableItem> tableItems = new List<TableItem>();
            for (int j = 0; j < 2; j++)
            {
                TableItem tableItem = new TableItem();
                tableItem.TableName = "Table Item" + j;
                for (int i = 0; i < 4; i++)
                {
                    tableItem.TableData.Add(new RowItem("xnl", "zhiwjia"));
                }

                tableItems.Add(tableItem);
            }

            responseData.TableItems = tableItems;

            return responseData;
        }


        private void ScrollToEnd()
        {
            this._converdationScrollViewer.UpdateLayout();
            this._converdationScrollViewer.ScrollToVerticalOffset(_converdationScrollViewer.ScrollableHeight);
        }
        #endregion

        #region Properties
        private UserDataControlViewModel _userDataViewModel = new UserDataControlViewModel();
        public UserDataControlViewModel UserDataViewModel
        {
            get
            {
                return _userDataViewModel;
            }
            set
            {
                _userDataViewModel = value;
                NotifyPropertyChanged("UserDataViewModel");
            }
        }

        private AutoGeneratedScriptControlViewModel _autoGeneratedScriptViewModel;
        public AutoGeneratedScriptControlViewModel AutoGeneratedScriptViewModel
        {
            get
            {
                if (_autoGeneratedScriptViewModel == null)
                {
                    var window = CodingBotClient.Instance.FindToolWindow(typeof(ScriptToolWindow));
                    if (window != null)
                    {
                        var control = window.Content as AutoGeneratedScriptControl;
                        if (control != null)
                        {
                            _autoGeneratedScriptViewModel = control.DataContext as AutoGeneratedScriptControlViewModel;
                        }
                    }
                }

                return _autoGeneratedScriptViewModel;
            }
        }

        private string _inputBoxText = "I want to ...";
        public string InputBoxText
        {
            get
            {
                return _inputBoxText;
            }
            set
            {
                _inputBoxText = value;
                NotifyPropertyChanged("InputBoxText");
            }
        }

        private Visibility _inputBoxVisibility = Visibility.Collapsed;
        public Visibility InputBoxVisibility
        {
            get
            {
                return _inputBoxVisibility;
            }
            set
            {
                _inputBoxVisibility = value;
                NotifyPropertyChanged("InputBoxVisibility");
            }
        }

        private bool _isRadioBoxEnabled = true;
        public bool IsRadioBoxEnabled
        {
            get
            {
                return _isRadioBoxEnabled;
            }
            set
            {
                _isRadioBoxEnabled = value;
                NotifyPropertyChanged("IsRadioBoxEnabled");
            }
        }
        #endregion

        #region Notify Prperty Changed
        public event PropertyChangedEventHandler PropertyChanged;
        protected void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #endregion
    }
}
